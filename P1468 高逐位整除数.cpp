/*
题目描述
高逐位整除数就是从其高位开始，前 1 位能被 1 整除，前 2 位能被 2 整除，…，前 n 位能被 n 整除。对于指定的正整数 n，共有多少个不同的 n 位高逐位整除数？对于 n 位高逐位整除数，n 是否存在有最大值？

输入描述
多组输入，每组输入一个 1-24 的正整数，表示要求的高逐位数的位数。

输出描述
对于每组输入，输出对应的高高逐位数，每个数占一行（一组输入可能有多个符合条件胡数）

样例输入
24
1

样例输出
144408645048225636603816
360852885036840078603672
402852168072900828009216
1
2
3
4
5
6
7
8
9
*/

#include<iostream>

using namespace std;

void f(int);

int a[10005], n;

int main()
{
	while (cin >> n)
		f(0);
	return 0;
}

void f(int p)
{
	int s = 0;
	if (p == n)
	{
		for (int i = 0; i < p; i++)
			cout << a[i];
		cout << endl;
		return;
	}
	for (int i = 0; i < p; i++)
		s = 10 * (s + a[i]) % (p + 1);

	for (int i = p ? 0 : 1; i < 10; i++)
		if ((s + i) % (p + 1) == 0)
		{
			a[p] = i;
			f(p + 1);
		}
}